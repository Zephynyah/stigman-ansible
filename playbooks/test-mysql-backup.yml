---
- name: Clean server installation
  hosts: localhost
  gather_facts: true
  become: yes
  become_method: sudo  
  vars:
    mysql_backup_location: ./backup
    mysql_new_datadir: /data/mysql
    mysql_old_datadir: /var/lib/mysql/
    mysql_server_cnf: /etc/my.cnf.d/mysql-server.cnf
    mysql_client_cnf: /etc/my.cnf.d/client.cnf
    mysql_client_mycnf: /etc/my.cnf
    mysql_client_port: 3306
    mysql_new_server_sock: "{{ mysql_new_datadir }}/mysql.sock"

  handlers:
    - name: MySQL | Restart service
      ansible.builtin.systemd:
        name: mysqld
        enabled: true
        state: restarted
        daemon_reload: true
      become: true
      listen: restart mysql
      tags:
       - always

  tasks:
    - command: hostname -f
      register: result

    - name: MySQL | Apply configuaration to avoid mysqld password prompt
      ini_file:
        path: "{{ mysql_client_cnf | d('/etc/my.cnf') }}"
        section: "{{ item.section }}"
        option: "{{ item.option }}"
        value: "{{ item.value }}"
      with_items:
        - { section: "client", option: "user", value: "root" }
        - { section: "client", option: "password", value: "" }
      become: true
      #notify:
        #- restart mysql

    - name: MySQL | Restart service
      ansible.builtin.systemd:
        name: mysqld
        enabled: true
        state: restarted
        daemon_reload: true
      become: true
      #listen: "restart mysql"
      tags:
       - mysql

    - name: MySQL | Ensure service is started
      become: true
      ansible.builtin.systemd:
        name: mysqld
        state: started
        enabled: yes

    - name: MySQL | Create backup and data directories
      ansible.builtin.file:
         path: "{{ item }}"
         owner: root
         group: root
         mode: 0775
         state: directory
      with_items:
         - "{{ mysql_backup_location }}"

    - name: MySQL | Create new data directories
      ansible.builtin.file:
         path: "{{ item }}"
         owner: mysql
         group: mysql
         mode: 0751
         state: directory
      register: new_datadir  
      with_items:
         - "{{ mysql_new_datadir }}"

    - name: MySQL | Identify the current MySQL Data directory
      ansible.builtin.command: mysql -u root -e "SELECT @@datadir;"
      register: datadir

    - name: MySQL | Ensure service is stopped
      become: true
      ansible.builtin.systemd:
        name: mysqld
        state: stopped
        enabled: false
      register: mysql_state

    - name: MySQL | Remove configuaration to avoid mysqld password prompt
      ini_file:
        path: /etc/my.cnf
        state: absent
        section: "{{ item.section }}"
        option: "{{ item.option }}"
      with_items:
        - { section: "client", option: "user" }
        - { section: "client", option: "password" }

    - name: MySQL | Stat old data directory
      ansible.builtin.stat:
        path: "{{ datadir.stdout_lines[1] }}"
      register: stat_old_data_dir

    - name: MySQL | Stat new data directory
      ansible.builtin.stat:
        path: "{{ mysql_new_datadir }}"
      register: stat_new_data_dir

    - name: "MySQL | Synchronizating {{ mysql_old_datadir }} -> {{ mysql_new_datadir }}"
      synchronize:
        src: "{{ mysql_old_datadir }}"
        dest: "{{ mysql_new_datadir }}"
        checksum: true
        times: true
      when:
        - stat_old_data_dir.stat.exists
        - stat_new_data_dir.stat.exists  
        - mysql_state.state == 'stopped'
      register: synchronized
      tags:
       - mysql

    - name: "MySQL | Allow MySQL to modify files in {{ mysql_new_datadir }}"
      sefcontext:
        target: "{{ mysql_new_datadir }}(/.*)?"
        setype: mysqld_db_t
        state: present
      when:
        - synchronized.rc  == 0
      tags:
       - mysql

    - name: MySQL | Apply new SELinux file context to filesystem
      ansible.builtin.command: restorecon -R "{{ mysql_new_datadir }}" 
      when:
       - synchronized.rc  == 0
      tags:
       - mysql
 
    - name: MySQL | Apply configuration for new data directory
      become: true
      ini_file:
        path: "{{ item.path | d('/etc/my.cnf') }}"
        section: "{{ item.section }}"
        option: "{{ item.option }}"
        value: "{{ item.value }}"
      with_items:
        - { path: "{{ mysql_server_cnf }}", section: "mysqld", option: "datadir", value: "{{ mysql_new_datadir }}" }
        - { path: "{{ mysql_server_cnf }}", section: "mysqld", option: "socket", value: "{{ mysql_new_server_sock }}" }
        - { path: "{{ mysql_client_cnf }}", section: "client", option: "port", value: "{{ mysql_client_port}}" }
        - { path: "{{ mysql_client_cnf }}", section: "client", option: "socket", value: "{{ mysql_new_server_sock }}" }

      when:
        - synchronized.rc  == 0
      notify:
        - restart mysql
      tags:
       - mysql

    - name: MySQL | Flush handlers
      meta: flush_handlers
